// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: fe4T6yj4tL0k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 3VNBKYSN1DZ/component
import Buttonn from "../../Buttonn"; // plasmic-import: vH74q5W3yUX/component
import WebsalesContent from "../../WebsalesContent"; // plasmic-import: nmqOH5ZNvK36/component
import MettingsContent from "../../MettingsContent"; // plasmic-import: ooA2dd1-Xl8Q/component
import LeadsContent from "../../LeadsContent"; // plasmic-import: _h_EwDMNM90b/component
import Footer from "../../Footer"; // plasmic-import: u8qWq0KyHYc/component

import { useScreenVariants as useScreenVariantsd2JxBvsegxLd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: d2JXBvsegxLD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicDeploy.module.css"; // plasmic-import: fe4T6yj4tL0k/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q7U0PeZ56jhW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 50aYXdf2efdU/icon

createPlasmicElementProxy;

export type PlasmicDeploy__VariantMembers = {};
export type PlasmicDeploy__VariantsArgs = {};
type VariantPropType = keyof PlasmicDeploy__VariantsArgs;
export const PlasmicDeploy__VariantProps = new Array<VariantPropType>();

export type PlasmicDeploy__ArgsType = {};
type ArgPropType = keyof PlasmicDeploy__ArgsType;
export const PlasmicDeploy__ArgProps = new Array<ArgPropType>();

export type PlasmicDeploy__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  websalesContent?: p.Flex<typeof WebsalesContent>;
  mettingsContent?: p.Flex<typeof MettingsContent>;
  leadsContent?: p.Flex<typeof LeadsContent>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultDeployProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDeploy__RenderFunc(props: {
  variants: PlasmicDeploy__VariantsArgs;
  args: PlasmicDeploy__ArgsType;
  overrides: PlasmicDeploy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd2JxBvsegxLd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___7I9Uq)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eok1V)}>
            <div className={classNames(projectcss.all, sty.freeBox__sW4Xa)}>
              <div className={classNames(projectcss.all, sty.freeBox___2Ac4P)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yfzxM)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <Buttonn
                        className={classNames(
                          "__wab_instance",
                          sty.buttonn__pzNvD
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p3NLl
                          )}
                        >
                          {"Add Collaborators"}
                        </div>
                      </Buttonn>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e64Kj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e5Uw
                          )}
                        >
                          {"Back"}
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gojJ
                            )}
                          >
                            {"Settings"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cBo8X
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hDlgi)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__jIngp)}
                        displayHeight={"5rem" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"5rem" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/presell_app_test/images/int788Fe187C9E252Ca77F95Ca24B421907Dishul6Ljpg.jpg",
                          fullWidth: 500,
                          fullHeight: 500,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kt8Be)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qzZzh
                        )}
                      >
                        {"Presell AI"}
                      </div>
                      <Buttonn
                        className={classNames(
                          "__wab_instance",
                          sty.buttonn__mAuWr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wLfSb
                          )}
                        >
                          {"Unknown Brand"}
                        </div>
                      </Buttonn>
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dEbFp)}
                  >
                    <Buttonn
                      className={classNames(
                        "__wab_instance",
                        sty.buttonn__azvUz
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___83Np1
                        )}
                      >
                        {"Create Campaign \u21b4"}
                      </div>
                    </Buttonn>
                    <Buttonn
                      className={classNames(
                        "__wab_instance",
                        sty.buttonn__r6WMn
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rbtoQ
                        )}
                      >
                        {"Manage Ad Accounts"}
                      </div>
                    </Buttonn>
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__sbsXo)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Q4Eq
                      )}
                    >
                      {"Deploy Assets"}
                    </div>
                  </Buttonn>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__srvkr)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/presell_app_test/images/f49D970E068C4Fdc91FdF19C8458E43Asvg2.svg",
                      fullWidth: 300,
                      fullHeight: 96,
                      aspectRatio: 3.115789
                    }}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__eWhtZ)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                ) : null}
                <WebsalesContent
                  data-plasmic-name={"websalesContent"}
                  data-plasmic-override={overrides.websalesContent}
                  className={classNames("__wab_instance", sty.websalesContent)}
                />

                <MettingsContent
                  data-plasmic-name={"mettingsContent"}
                  data-plasmic-override={overrides.mettingsContent}
                  className={classNames("__wab_instance", sty.mettingsContent)}
                />

                <LeadsContent
                  data-plasmic-name={"leadsContent"}
                  data-plasmic-override={overrides.leadsContent}
                  className={classNames("__wab_instance", sty.leadsContent)}
                />
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__pRozK)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dZcg0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vta8M
                      )}
                    >
                      {"Settings"}
                    </div>
                    <Buttonn
                      className={classNames(
                        "__wab_instance",
                        sty.buttonn__qbGxx
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hztgX
                        )}
                      >
                        {"Add Collaborators"}
                      </div>
                    </Buttonn>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zVz1B)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__enUW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4X2Ku
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Visits"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j8ZuC
                        )}
                      >
                        {"0"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__priG)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8As40
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Leads"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d9DFy
                        )}
                      >
                        {"0"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jm6FW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k4Jc
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Ad Spend"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jd4If
                        )}
                      >
                        {"$0"}
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__l21M5)}>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "websalesContent",
    "mettingsContent",
    "leadsContent",
    "footer"
  ],
  header: ["header"],
  websalesContent: ["websalesContent"],
  mettingsContent: ["mettingsContent"],
  leadsContent: ["leadsContent"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  websalesContent: typeof WebsalesContent;
  mettingsContent: typeof MettingsContent;
  leadsContent: typeof LeadsContent;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDeploy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDeploy__VariantsArgs;
    args?: PlasmicDeploy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDeploy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDeploy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDeploy__ArgProps,
          internalVariantPropNames: PlasmicDeploy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDeploy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDeploy";
  } else {
    func.displayName = `PlasmicDeploy.${nodeName}`;
  }
  return func;
}

export const PlasmicDeploy = Object.assign(
  // Top-level PlasmicDeploy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    websalesContent: makeNodeComponent("websalesContent"),
    mettingsContent: makeNodeComponent("mettingsContent"),
    leadsContent: makeNodeComponent("leadsContent"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDeploy
    internalVariantProps: PlasmicDeploy__VariantProps,
    internalArgProps: PlasmicDeploy__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDeploy;
/* prettier-ignore-end */
