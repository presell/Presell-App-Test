// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: Dw6bZclG489

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 3VNBKYSN1DZ/component
import Buttonn from "../../Buttonn"; // plasmic-import: vH74q5W3yUX/component
import TextInput from "../../TextInput"; // plasmic-import: WknlrgHi0ZzB/component
import Footer from "../../Footer"; // plasmic-import: u8qWq0KyHYc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicCreate.module.css"; // plasmic-import: Dw6bZclG489/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q7U0PeZ56jhW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 50aYXdf2efdU/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: l7Jy-a2QBM_b/icon

createPlasmicElementProxy;

export type PlasmicCreate__VariantMembers = {};
export type PlasmicCreate__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreate__VariantsArgs;
export const PlasmicCreate__VariantProps = new Array<VariantPropType>();

export type PlasmicCreate__ArgsType = {};
type ArgPropType = keyof PlasmicCreate__ArgsType;
export const PlasmicCreate__ArgProps = new Array<ArgPropType>();

export type PlasmicCreate__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  form?: p.Flex<"form">;
  textInput?: p.Flex<typeof TextInput>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCreateProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreate__RenderFunc(props: {
  variants: PlasmicCreate__VariantsArgs;
  args: PlasmicCreate__ArgsType;
  overrides: PlasmicCreate__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__rLqix)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gXzwd)}>
            <div className={classNames(projectcss.all, sty.freeBox__wpUi)}>
              <Buttonn
                className={classNames("__wab_instance", sty.buttonn__eKkoi)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m5Cpx
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 500 }}
                    >
                      {"Import \u21b4"}
                    </span>
                  </React.Fragment>
                </div>
              </Buttonn>
              <form
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                Action={
                  "https://hook.us1.make.com/rm5p9pncqvxifcd9pjmtd2gu272sot83" as const
                }
                Method={"post" as const}
                className={classNames(projectcss.all, sty.form)}
              >
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={
                    "Enter Your Product Name: Followed By A Short Description" as const
                  }
                  value={
                    p.generateStateValueProp($state, ["textInput", "value"]) ??
                    ""
                  }
                />

                <Buttonn
                  className={classNames("__wab_instance", sty.buttonn__ytRq6)}
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__glbz6
                    )}
                  >
                    {"Generate Assets"}
                  </div>
                </Buttonn>
              </form>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ddIkG
            )}
          >
            {"Use Existing Product"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zIp0H)}>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "form", "textInput", "footer"],
  header: ["header"],
  form: ["form", "textInput"],
  textInput: ["textInput"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  form: "form";
  textInput: typeof TextInput;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreate__VariantsArgs;
    args?: PlasmicCreate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCreate__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCreate__ArgProps,
          internalVariantPropNames: PlasmicCreate__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreate";
  } else {
    func.displayName = `PlasmicCreate.${nodeName}`;
  }
  return func;
}

export const PlasmicCreate = Object.assign(
  // Top-level PlasmicCreate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCreate
    internalVariantProps: PlasmicCreate__VariantProps,
    internalArgProps: PlasmicCreate__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCreate;
/* prettier-ignore-end */
