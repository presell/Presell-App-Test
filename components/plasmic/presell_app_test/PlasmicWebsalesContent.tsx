// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: nmqOH5ZNvK36

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Active from "../../Active"; // plasmic-import: FzDg8WCEpHdu/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicWebsalesContent.module.css"; // plasmic-import: nmqOH5ZNvK36/css

createPlasmicElementProxy;

export type PlasmicWebsalesContent__VariantMembers = {};
export type PlasmicWebsalesContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicWebsalesContent__VariantsArgs;
export const PlasmicWebsalesContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWebsalesContent__ArgsType = {};
type ArgPropType = keyof PlasmicWebsalesContent__ArgsType;
export const PlasmicWebsalesContent__ArgProps = new Array<ArgPropType>();

export type PlasmicWebsalesContent__OverridesType = {
  root?: p.Flex<"div">;
  active?: p.Flex<typeof Active>;
};

export interface DefaultWebsalesContentProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWebsalesContent__RenderFunc(props: {
  variants: PlasmicWebsalesContent__VariantsArgs;
  args: PlasmicWebsalesContent__ArgsType;
  overrides: PlasmicWebsalesContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__pCiSz)}>
        <div className={classNames(projectcss.all, sty.freeBox__h3Onu)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__e5LYd)}
            displayHeight={"25px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"63px" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/presell_app_test/images/trafficsvg.svg",
              fullWidth: 291,
              fullHeight: 150,
              aspectRatio: 1.942857
            }}
          />
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jkuI3
          )}
        >
          {"Traffic"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__zv7Rn)}>
        <Active
          data-plasmic-name={"active"}
          data-plasmic-override={overrides.active}
          className={classNames("__wab_instance", sty.active)}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mu8Yv
          )}
        >
          {"Processing"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__fgNkg)}>
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__mimOi)}
          displayHeight={"25px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"55px" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/presell_app_test/images/webSalespng.png",
            fullWidth: 316,
            fullHeight: 168,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cg53B
          )}
        >
          {"Web Sales"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___4Tajf)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iR2Xf
          )}
        >
          {"$5"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__z2RAe
          )}
        >
          {"Daily Budget"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "active"],
  active: ["active"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  active: typeof Active;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWebsalesContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWebsalesContent__VariantsArgs;
    args?: PlasmicWebsalesContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWebsalesContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWebsalesContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWebsalesContent__ArgProps,
          internalVariantPropNames: PlasmicWebsalesContent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWebsalesContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWebsalesContent";
  } else {
    func.displayName = `PlasmicWebsalesContent.${nodeName}`;
  }
  return func;
}

export const PlasmicWebsalesContent = Object.assign(
  // Top-level PlasmicWebsalesContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    active: makeNodeComponent("active"),

    // Metadata about props expected for PlasmicWebsalesContent
    internalVariantProps: PlasmicWebsalesContent__VariantProps,
    internalArgProps: PlasmicWebsalesContent__ArgProps
  }
);

export default PlasmicWebsalesContent;
/* prettier-ignore-end */
