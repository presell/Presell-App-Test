// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: ED37aDd-WXqw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MagicEditor from "../../MagicEditor"; // plasmic-import: NYJ8cj9LyOeF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: HZxe9asd1Dj/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicSqueezeTheme2.module.css"; // plasmic-import: ED37aDd-WXqw/css

createPlasmicElementProxy;

export type PlasmicSqueezeTheme2__VariantMembers = {
  element1: "element1";
};
export type PlasmicSqueezeTheme2__VariantsArgs = {
  element1?: SingleBooleanChoiceArg<"element1">;
};
type VariantPropType = keyof PlasmicSqueezeTheme2__VariantsArgs;
export const PlasmicSqueezeTheme2__VariantProps = new Array<VariantPropType>(
  "element1"
);

export type PlasmicSqueezeTheme2__ArgsType = {};
type ArgPropType = keyof PlasmicSqueezeTheme2__ArgsType;
export const PlasmicSqueezeTheme2__ArgProps = new Array<ArgPropType>();

export type PlasmicSqueezeTheme2__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
  magicEditor?: p.Flex<typeof MagicEditor>;
};

export interface DefaultSqueezeTheme2Props {
  element1?: SingleBooleanChoiceArg<"element1">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueezeTheme2__RenderFunc(props: {
  variants: PlasmicSqueezeTheme2__VariantsArgs;
  args: PlasmicSqueezeTheme2__ArgsType;
  overrides: PlasmicSqueezeTheme2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "element1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.element1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootelement1]: hasVariant($state, "element1", "element1") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textelement1]: hasVariant($state, "element1", "element1") }
          )}
          onClick={async event => {
            const $steps = {};
            $steps["updateElement1"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "0db1yBxoSXak",
                        componentUuid: "ED37aDd-WXqw",
                        argName: "vgroup"
                      },
                      () => "element1"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "0db1yBxoSXak",
                        componentUuid: "ED37aDd-WXqw",
                        argName: "operation"
                      },
                      () => 2
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "0db1yBxoSXak",
                        componentUuid: "ED37aDd-WXqw",
                        argName: "value"
                      },
                      () => "element1"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "0db1yBxoSXak",
                      componentUuid: "ED37aDd-WXqw"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = p.get($state, vgroup);
                        p.set($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateElement1"] === "object" &&
              typeof $steps["updateElement1"].then === "function"
            ) {
              $steps["updateElement1"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariant",
                  interactionUuid: "0db1yBxoSXak",
                  componentUuid: "ED37aDd-WXqw"
                },
                $steps["updateElement1"]
              );
            }
          }}
          onMouseOver={async event => {
            const $steps = {};
            $steps["updateElement1"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "WnvgGyVe4KrU",
                        componentUuid: "ED37aDd-WXqw",
                        argName: "vgroup"
                      },
                      () => "element1"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "WnvgGyVe4KrU",
                        componentUuid: "ED37aDd-WXqw",
                        argName: "operation"
                      },
                      () => 2
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "WnvgGyVe4KrU",
                        componentUuid: "ED37aDd-WXqw",
                        argName: "value"
                      },
                      () => "element1"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "WnvgGyVe4KrU",
                      componentUuid: "ED37aDd-WXqw"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = p.get($state, vgroup);
                        p.set($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateElement1"] === "object" &&
              typeof $steps["updateElement1"].then === "function"
            ) {
              $steps["updateElement1"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariant",
                  interactionUuid: "WnvgGyVe4KrU",
                  componentUuid: "ED37aDd-WXqw"
                },
                $steps["updateElement1"]
              );
            }
          }}
        >
          {hasVariant($state, "element1", "element1") ? (
            <React.Fragment>
              {(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            "Enter some text"
          )}
        </div>
        {(hasVariant($state, "element1", "element1") ? true : true) ? (
          <MagicEditor
            data-plasmic-name={"magicEditor"}
            data-plasmic-override={overrides.magicEditor}
            className={classNames("__wab_instance", sty.magicEditor, {
              [sty.magicEditorelement1]: hasVariant(
                $state,
                "element1",
                "element1"
              )
            })}
          />
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text", "magicEditor"],
  freeBox: ["freeBox", "text", "magicEditor"],
  text: ["text"],
  magicEditor: ["magicEditor"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
  magicEditor: typeof MagicEditor;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueezeTheme2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueezeTheme2__VariantsArgs;
    args?: PlasmicSqueezeTheme2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSqueezeTheme2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSqueezeTheme2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSqueezeTheme2__ArgProps,
          internalVariantPropNames: PlasmicSqueezeTheme2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSqueezeTheme2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueezeTheme2";
  } else {
    func.displayName = `PlasmicSqueezeTheme2.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueezeTheme2 = Object.assign(
  // Top-level PlasmicSqueezeTheme2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    magicEditor: makeNodeComponent("magicEditor"),

    // Metadata about props expected for PlasmicSqueezeTheme2
    internalVariantProps: PlasmicSqueezeTheme2__VariantProps,
    internalArgProps: PlasmicSqueezeTheme2__ArgProps
  }
);

export default PlasmicSqueezeTheme2;
/* prettier-ignore-end */
