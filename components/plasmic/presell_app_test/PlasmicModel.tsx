// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: lyFcBxjEhrMn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 3VNBKYSN1DZ/component
import Buttonn from "../../Buttonn"; // plasmic-import: vH74q5W3yUX/component
import Footer from "../../Footer"; // plasmic-import: u8qWq0KyHYc/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: HZxe9asd1Dj/codeComponent

import { useScreenVariants as useScreenVariantsd2JxBvsegxLd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: d2JXBvsegxLD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicModel.module.css"; // plasmic-import: lyFcBxjEhrMn/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q7U0PeZ56jhW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 50aYXdf2efdU/icon

createPlasmicElementProxy;

export type PlasmicModel__VariantMembers = {};
export type PlasmicModel__VariantsArgs = {};
type VariantPropType = keyof PlasmicModel__VariantsArgs;
export const PlasmicModel__VariantProps = new Array<VariantPropType>();

export type PlasmicModel__ArgsType = {};
type ArgPropType = keyof PlasmicModel__ArgsType;
export const PlasmicModel__ArgProps = new Array<ArgPropType>();

export type PlasmicModel__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultModelProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicModel__RenderFunc(props: {
  variants: PlasmicModel__VariantsArgs;
  args: PlasmicModel__ArgsType;
  overrides: PlasmicModel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "9tDX6QXXin2Z6jndTXctjE",
            opId: "d100839e-ed59-4514-8745-250adad5e737",
            userArgs: {
              filters: [$ctx.params.slug]
            },
            cacheKey: "plasmic.$.tLzuIWXNFwaS.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd2JxBvsegxLd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__cWOlT)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qxlKn)}>
            <div className={classNames(projectcss.all, sty.freeBox__fS5MB)}>
              <div className={classNames(projectcss.all, sty.freeBox__rTjYa)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yeVzc)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <Buttonn
                        className={classNames(
                          "__wab_instance",
                          sty.buttonn__go3D
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Kvur
                          )}
                        >
                          {"Add Collaborators"}
                        </div>
                      </Buttonn>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9PNss
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5GnkE
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["goToHomepage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "navigation",
                                        interactionUuid: "XwLy1FsdkmRn",
                                        componentUuid: "lyFcBxjEhrMn",
                                        argName: "destination"
                                      },
                                      () => `/`
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "navigation",
                                      interactionUuid: "XwLy1FsdkmRn",
                                      componentUuid: "lyFcBxjEhrMn"
                                    },
                                    () =>
                                      (({ destination }) => {
                                        __nextRouter?.push(destination);
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["goToHomepage"] === "object" &&
                              typeof $steps["goToHomepage"].then === "function"
                            ) {
                              $steps["goToHomepage"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "XwLy1FsdkmRn",
                                  componentUuid: "lyFcBxjEhrMn"
                                },
                                $steps["goToHomepage"]
                              );
                            }
                          }}
                        >
                          {"Back"}
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3RhKz
                            )}
                            onClick={async event => {
                              const $steps = {};
                              $steps["goToSettings"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "navigation",
                                          interactionUuid: "07vFAK0ClwlN",
                                          componentUuid: "lyFcBxjEhrMn",
                                          argName: "destination"
                                        },
                                        () =>
                                          `/model/settings/${`value${$ctx.params.slug}`}`
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "navigation",
                                        interactionUuid: "07vFAK0ClwlN",
                                        componentUuid: "lyFcBxjEhrMn"
                                      },
                                      () =>
                                        (({ destination }) => {
                                          __nextRouter?.push(destination);
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                              if (
                                typeof $steps["goToSettings"] === "object" &&
                                typeof $steps["goToSettings"].then ===
                                  "function"
                              ) {
                                $steps["goToSettings"] =
                                  await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "navigation",
                                      interactionUuid: "07vFAK0ClwlN",
                                      componentUuid: "lyFcBxjEhrMn"
                                    },
                                    $steps["goToSettings"]
                                  );
                              }
                            }}
                          >
                            {"Settings"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6GdEi
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jtTkb)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__aHHg)}
                        displayHeight={"5rem" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"5rem" as const}
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $queries.query.data[0][
                              "Hero Image (from Products)"
                            ][0].url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://site-assets.plasmic.app/d1fcf223340f5a68156e4b07f6478d57.jpg";
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iDq9Z)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bdWe
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0][
                                "Product Name (from Products)"
                              ][0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "LEARNARAMA\u2122 MATS";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Buttonn
                        className={classNames(
                          "__wab_instance",
                          sty.buttonn__tDksO
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__srII
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.query.data[0][
                                  "Brand Name (from Brands)"
                                ][0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Unknown Brand";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Buttonn>
                    </div>
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__je7Ub)}>
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__qnvtS)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToModel"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "e9EgF3yTvVmF",
                                  componentUuid: "lyFcBxjEhrMn",
                                  argName: "destination"
                                },
                                () =>
                                  `/model/${`recSlqE5GYI0GkI0D${$ctx.params.slug}`}`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "e9EgF3yTvVmF",
                                componentUuid: "lyFcBxjEhrMn"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToModel"] === "object" &&
                        typeof $steps["goToModel"].then === "function"
                      ) {
                        $steps["goToModel"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "e9EgF3yTvVmF",
                            componentUuid: "lyFcBxjEhrMn"
                          },
                          $steps["goToModel"]
                        );
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f5FyV
                      )}
                    >
                      {"Pages"}
                    </div>
                  </Buttonn>
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__iEhie)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToAds"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "bqozhakzxWFY",
                                  componentUuid: "lyFcBxjEhrMn",
                                  argName: "destination"
                                },
                                () => `/model/ads/${`value${$ctx.params.slug}`}`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "bqozhakzxWFY",
                                componentUuid: "lyFcBxjEhrMn"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToAds"] === "object" &&
                        typeof $steps["goToAds"].then === "function"
                      ) {
                        $steps["goToAds"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "bqozhakzxWFY",
                            componentUuid: "lyFcBxjEhrMn"
                          },
                          $steps["goToAds"]
                        );
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rzkW1
                      )}
                    >
                      {"Ads"}
                    </div>
                  </Buttonn>
                </div>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kKeZ6)}
                  displayHeight={"12rem" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"24rem" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $queries.query.data[0]["Advertorial Preview"][0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/70f885bde8d7ab1b18ebb70cf28d52ca.png";
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dlhAd
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.query.data[0]["Advertorial H1"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Advertorial";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dq6Fl
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.query.data[0]["Advertorial URL"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Buttonn
                  className={classNames("__wab_instance", sty.buttonn___6IpM2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xv0Lw
                    )}
                  >
                    {"Manage Asset"}
                  </div>
                </Buttonn>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__uWBis)}
                  displayHeight={"12rem" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"24rem" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $queries.query.data[0]["Squeeze Preview"][0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/a47c9c13ce70745c8310e562a56ced3a.png";
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hpzVc
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.query.data[0]["Squeeze H1"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Squeeze";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oaeFx
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.query.data[0]["Squeeze URL"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "https://feed.presell.ai/squeeze/2/reco4VotN1DjCOaxJ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Buttonn
                  className={classNames("__wab_instance", sty.buttonn___5WeNp)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a59V
                    )}
                  >
                    {"Manage Asset"}
                  </div>
                </Buttonn>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__cMUd)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToDeploy"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "m2q8aFeobAyR",
                                  componentUuid: "lyFcBxjEhrMn",
                                  argName: "destination"
                                },
                                () =>
                                  `/model/deploy/${`value${$ctx.params.slug}`}`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "m2q8aFeobAyR",
                                componentUuid: "lyFcBxjEhrMn"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToDeploy"] === "object" &&
                        typeof $steps["goToDeploy"].then === "function"
                      ) {
                        $steps["goToDeploy"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "m2q8aFeobAyR",
                            componentUuid: "lyFcBxjEhrMn"
                          },
                          $steps["goToDeploy"]
                        );
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__geT95
                      )}
                    >
                      {"Deploy Assets"}
                    </div>
                  </Buttonn>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__mhXw6)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/presell_app_test/images/f49D970E068C4Fdc91FdF19C8458E43Asvg2.svg",
                      fullWidth: 300,
                      fullHeight: 96,
                      aspectRatio: 3.115789
                    }}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__d278A)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                ) : null}
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__dUZkZ)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lf5T)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9EVa7
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToSettings"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "LfTNiuDA8eSH",
                                    componentUuid: "lyFcBxjEhrMn",
                                    argName: "destination"
                                  },
                                  () =>
                                    `/model/settings/${`value${$ctx.params.slug}`}`
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "LfTNiuDA8eSH",
                                  componentUuid: "lyFcBxjEhrMn"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToSettings"] === "object" &&
                          typeof $steps["goToSettings"].then === "function"
                        ) {
                          $steps["goToSettings"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "LfTNiuDA8eSH",
                              componentUuid: "lyFcBxjEhrMn"
                            },
                            $steps["goToSettings"]
                          );
                        }
                      }}
                    >
                      {"Settings"}
                    </div>
                    <Buttonn
                      className={classNames(
                        "__wab_instance",
                        sty.buttonn__c41Iv
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vu0J
                        )}
                      >
                        {"Add Collaborators"}
                      </div>
                    </Buttonn>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yqb7H)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yyq1L)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nN9Fj
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Visits"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ulEM
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0].Visits;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "0";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vg1PW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___05MqT
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Leads"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___715Ye
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0].Leads;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "0";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xutS4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Mbrg
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Ad Spend"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tTNfE
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0]["Ad Spend"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "$0";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__beoyB
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data[0]["Persona H1"];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Persona";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Dgyf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__biI55)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__evnNp
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Who"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zp1OY
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0]["Persona Who"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__r1OK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zb3Uv
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Problem"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___75CVz
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0]["Persona Problem"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Improving children's perceptual motor skills";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__czgtS)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tQXi9
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Solution"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__teVk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0]["Persona Solution"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Fun, engaging motor skills development";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__gzUpp)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToDeploy"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "J9lECHbxzU_d",
                                  componentUuid: "lyFcBxjEhrMn",
                                  argName: "destination"
                                },
                                () =>
                                  `/model/deploy/${`value${$ctx.params.slug}`}`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "J9lECHbxzU_d",
                                componentUuid: "lyFcBxjEhrMn"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToDeploy"] === "object" &&
                        typeof $steps["goToDeploy"].then === "function"
                      ) {
                        $steps["goToDeploy"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "J9lECHbxzU_d",
                            componentUuid: "lyFcBxjEhrMn"
                          },
                          $steps["goToDeploy"]
                        );
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dwcMi
                      )}
                    >
                      {"Deploy Assets"}
                    </div>
                  </Buttonn>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zwKxN)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/presell_app_test/images/f49D970E068C4Fdc91FdF19C8458E43Asvg.svg",
                      fullWidth: 300,
                      fullHeight: 96,
                      aspectRatio: 3.115789
                    }}
                  />
                </div>
              ) : null}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5N8Qb)}>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "footer"],
  header: ["header"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModel__VariantsArgs;
    args?: PlasmicModel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicModel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicModel__ArgProps,
          internalVariantPropNames: PlasmicModel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModel";
  } else {
    func.displayName = `PlasmicModel.${nodeName}`;
  }
  return func;
}

export const PlasmicModel = Object.assign(
  // Top-level PlasmicModel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicModel
    internalVariantProps: PlasmicModel__VariantProps,
    internalArgProps: PlasmicModel__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicModel;
/* prettier-ignore-end */
