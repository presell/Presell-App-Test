// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: FzDg8WCEpHdu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicActive.module.css"; // plasmic-import: FzDg8WCEpHdu/css

createPlasmicElementProxy;

export type PlasmicActive__VariantMembers = {
  inactive: "inactive";
};
export type PlasmicActive__VariantsArgs = {
  inactive?: SingleBooleanChoiceArg<"inactive">;
};
type VariantPropType = keyof PlasmicActive__VariantsArgs;
export const PlasmicActive__VariantProps = new Array<VariantPropType>(
  "inactive"
);

export type PlasmicActive__ArgsType = {};
type ArgPropType = keyof PlasmicActive__ArgsType;
export const PlasmicActive__ArgProps = new Array<ArgPropType>();

export type PlasmicActive__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultActiveProps {
  inactive?: SingleBooleanChoiceArg<"inactive">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActive__RenderFunc(props: {
  variants: PlasmicActive__VariantsArgs;
  args: PlasmicActive__ArgsType;
  overrides: PlasmicActive__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "inactive",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.inactive
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root,
          { [sty.rootinactive]: hasVariant($state, "inactive", "inactive") }
        )}
        onClick={async event => {
          const $steps = {};
          $steps["updateInactive"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "xNeRXlAWSh7I",
                      componentUuid: "FzDg8WCEpHdu",
                      argName: "vgroup"
                    },
                    () => "inactive"
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariant",
                      interactionUuid: "xNeRXlAWSh7I",
                      componentUuid: "FzDg8WCEpHdu",
                      argName: "operation"
                    },
                    () => 2
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariant",
                    interactionUuid: "xNeRXlAWSh7I",
                    componentUuid: "FzDg8WCEpHdu"
                  },
                  () =>
                    (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = p.get($state, vgroup);
                      p.set($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updateInactive"] === "object" &&
            typeof $steps["updateInactive"].then === "function"
          ) {
            $steps["updateInactive"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "xNeRXlAWSh7I",
                componentUuid: "FzDg8WCEpHdu"
              },
              $steps["updateInactive"]
            );
          }
        }}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxinactive]: hasVariant($state, "inactive", "inactive")
          })}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActive__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActive__VariantsArgs;
    args?: PlasmicActive__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActive__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActive__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicActive__ArgProps,
          internalVariantPropNames: PlasmicActive__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActive__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActive";
  } else {
    func.displayName = `PlasmicActive.${nodeName}`;
  }
  return func;
}

export const PlasmicActive = Object.assign(
  // Top-level PlasmicActive renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicActive
    internalVariantProps: PlasmicActive__VariantProps,
    internalArgProps: PlasmicActive__ArgProps
  }
);

export default PlasmicActive;
/* prettier-ignore-end */
