// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xsZMHztzDFATfur1s6fDND
// Component: ufvVGZCc-vcS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 3VNBKYSN1DZ/component
import Buttonn from "../../Buttonn"; // plasmic-import: vH74q5W3yUX/component
import Footer from "../../Footer"; // plasmic-import: u8qWq0KyHYc/component

import { useScreenVariants as useScreenVariantsd2JxBvsegxLd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: d2JXBvsegxLD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_presell_app_test.module.css"; // plasmic-import: xsZMHztzDFATfur1s6fDND/projectcss
import sty from "./PlasmicSettings.module.css"; // plasmic-import: ufvVGZCc-vcS/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q7U0PeZ56jhW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 50aYXdf2efdU/icon

createPlasmicElementProxy;

export type PlasmicSettings__VariantMembers = {};
export type PlasmicSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettings__VariantsArgs;
export const PlasmicSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicSettings__ArgsType = {};
type ArgPropType = keyof PlasmicSettings__ArgsType;
export const PlasmicSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicSettings__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultSettingsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettings__RenderFunc(props: {
  variants: PlasmicSettings__VariantsArgs;
  args: PlasmicSettings__ArgsType;
  overrides: PlasmicSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd2JxBvsegxLd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ya7B0)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___17Etb)}>
            <div className={classNames(projectcss.all, sty.freeBox__tyn7Z)}>
              <div className={classNames(projectcss.all, sty.freeBox__ayE9)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l5Uze)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <Buttonn
                        className={classNames(
                          "__wab_instance",
                          sty.buttonn__h5JQ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rkwOa
                          )}
                        >
                          {"Add Collaborators"}
                        </div>
                      </Buttonn>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fnGnV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__liTvp
                          )}
                        >
                          {"Back"}
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jjMkV
                            )}
                          >
                            {"Settings"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___20OkR
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__vMugf)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__esyy1)}
                      displayHeight={"5rem" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"5rem" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/presell_app_test/images/int53A96Cf388736Fb56B65B9Be3C55Af5E1Pi1Jximjpg.jpg",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nwAg9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__snCP
                      )}
                    >
                      {"LEARNARAMA\u2122 MATS"}
                    </div>
                    <Buttonn
                      className={classNames(
                        "__wab_instance",
                        sty.buttonn__nCp2F
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tcwgd
                        )}
                      >
                        {"Unknown Brand"}
                      </div>
                    </Buttonn>
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bC6Y
                    )}
                  >
                    {"Domains"}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9SJS
                    )}
                  >
                    {"\u23f3 www.yourdomain.com"}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__nCib7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zaW2N
                      )}
                    >
                      {"Connect Domain"}
                    </div>
                  </Buttonn>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__lkb)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                ) : null}
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__hnkA9)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o8PAc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b4OCw
                      )}
                    >
                      {"Settings"}
                    </div>
                    <Buttonn
                      className={classNames(
                        "__wab_instance",
                        sty.buttonn__emc88
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pLqfl
                        )}
                      >
                        {"Add Collaborators"}
                      </div>
                    </Buttonn>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mXuJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pe8Q3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ndYea
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Visits"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kn7Z0
                        )}
                      >
                        {"0"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rwTtb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hMqoc
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Leads"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Ex40
                        )}
                      >
                        {"0"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ut3Sr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hR7K
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Ad Spend"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m7QwG
                        )}
                      >
                        {"$0"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1UyL3
                    )}
                  >
                    {"Domains"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ahmE7
                    )}
                  >
                    {"\u23f3 www.yourdomain.com"}
                  </div>
                  <Buttonn
                    className={classNames("__wab_instance", sty.buttonn__nOgDi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__slFYk
                      )}
                    >
                      {"Connect Domain"}
                    </div>
                  </Buttonn>
                </div>
              ) : null}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__beDh3)}>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "footer"],
  header: ["header"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettings__VariantsArgs;
    args?: PlasmicSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSettings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSettings__ArgProps,
          internalVariantPropNames: PlasmicSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettings";
  } else {
    func.displayName = `PlasmicSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicSettings = Object.assign(
  // Top-level PlasmicSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicSettings
    internalVariantProps: PlasmicSettings__VariantProps,
    internalArgProps: PlasmicSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettings;
/* prettier-ignore-end */
